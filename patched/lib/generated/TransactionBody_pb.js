// source: TransactionBody.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('@exodus/google-protobuf');
var goog = jspb;
const proto = {};

var CryptoAddLiveHash_pb = require('./CryptoAddLiveHash_pb.js');
goog.object.extend(proto, CryptoAddLiveHash_pb);
var CryptoCreate_pb = require('./CryptoCreate_pb.js');
goog.object.extend(proto, CryptoCreate_pb);
var CryptoDelete_pb = require('./CryptoDelete_pb.js');
goog.object.extend(proto, CryptoDelete_pb);
var CryptoDeleteLiveHash_pb = require('./CryptoDeleteLiveHash_pb.js');
goog.object.extend(proto, CryptoDeleteLiveHash_pb);
var CryptoTransfer_pb = require('./CryptoTransfer_pb.js');
goog.object.extend(proto, CryptoTransfer_pb);
var CryptoUpdate_pb = require('./CryptoUpdate_pb.js');
goog.object.extend(proto, CryptoUpdate_pb);
var Duration_pb = require('./Duration_pb.js');
goog.object.extend(proto, Duration_pb);
var BasicTypes_pb = require('./BasicTypes_pb.js');
goog.object.extend(proto, BasicTypes_pb);
goog.exportSymbol('proto.proto.TransactionBody', null, { proto });
goog.exportSymbol('proto.proto.TransactionBody.DataCase', null, { proto });
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.TransactionBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.TransactionBody.oneofGroups_);
};
goog.inherits(proto.proto.TransactionBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.TransactionBody.displayName = 'proto.proto.TransactionBody';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.TransactionBody.oneofGroups_ = [[10,11,12,13,14,15]];

/**
 * @enum {number}
 */
proto.proto.TransactionBody.DataCase = {
  DATA_NOT_SET: 0,
  CRYPTOADDLIVEHASH: 10,
  CRYPTOCREATEACCOUNT: 11,
  CRYPTODELETE: 12,
  CRYPTODELETELIVEHASH: 13,
  CRYPTOTRANSFER: 14,
  CRYPTOUPDATEACCOUNT: 15
};

/**
 * @return {proto.proto.TransactionBody.DataCase}
 */
proto.proto.TransactionBody.prototype.getDataCase = function() {
  return /** @type {proto.proto.TransactionBody.DataCase} */(jspb.Message.computeOneofCase(this, proto.proto.TransactionBody.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.TransactionBody.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.TransactionBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.TransactionBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TransactionBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionid: (f = msg.getTransactionid()) && BasicTypes_pb.TransactionID.toObject(includeInstance, f),
    nodeaccountid: (f = msg.getNodeaccountid()) && BasicTypes_pb.AccountID.toObject(includeInstance, f),
    transactionfee: jspb.Message.getFieldWithDefault(msg, 3, "0"),
    transactionvalidduration: (f = msg.getTransactionvalidduration()) && Duration_pb.Duration.toObject(includeInstance, f),
    generaterecord: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    memo: jspb.Message.getFieldWithDefault(msg, 6, ""),
    cryptoaddlivehash: (f = msg.getCryptoaddlivehash()) && CryptoAddLiveHash_pb.CryptoAddLiveHashTransactionBody.toObject(includeInstance, f),
    cryptocreateaccount: (f = msg.getCryptocreateaccount()) && CryptoCreate_pb.CryptoCreateTransactionBody.toObject(includeInstance, f),
    cryptodelete: (f = msg.getCryptodelete()) && CryptoDelete_pb.CryptoDeleteTransactionBody.toObject(includeInstance, f),
    cryptodeletelivehash: (f = msg.getCryptodeletelivehash()) && CryptoDeleteLiveHash_pb.CryptoDeleteLiveHashTransactionBody.toObject(includeInstance, f),
    cryptotransfer: (f = msg.getCryptotransfer()) && CryptoTransfer_pb.CryptoTransferTransactionBody.toObject(includeInstance, f),
    cryptoupdateaccount: (f = msg.getCryptoupdateaccount()) && CryptoUpdate_pb.CryptoUpdateTransactionBody.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.TransactionBody}
 */
proto.proto.TransactionBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.TransactionBody;
  return proto.proto.TransactionBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.TransactionBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.TransactionBody}
 */
proto.proto.TransactionBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new BasicTypes_pb.TransactionID;
      reader.readMessage(value,BasicTypes_pb.TransactionID.deserializeBinaryFromReader);
      msg.setTransactionid(value);
      break;
    case 2:
      var value = new BasicTypes_pb.AccountID;
      reader.readMessage(value,BasicTypes_pb.AccountID.deserializeBinaryFromReader);
      msg.setNodeaccountid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setTransactionfee(value);
      break;
    case 4:
      var value = new Duration_pb.Duration;
      reader.readMessage(value,Duration_pb.Duration.deserializeBinaryFromReader);
      msg.setTransactionvalidduration(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGeneraterecord(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    case 10:
      var value = new CryptoAddLiveHash_pb.CryptoAddLiveHashTransactionBody;
      reader.readMessage(value,CryptoAddLiveHash_pb.CryptoAddLiveHashTransactionBody.deserializeBinaryFromReader);
      msg.setCryptoaddlivehash(value);
      break;
    case 11:
      var value = new CryptoCreate_pb.CryptoCreateTransactionBody;
      reader.readMessage(value,CryptoCreate_pb.CryptoCreateTransactionBody.deserializeBinaryFromReader);
      msg.setCryptocreateaccount(value);
      break;
    case 12:
      var value = new CryptoDelete_pb.CryptoDeleteTransactionBody;
      reader.readMessage(value,CryptoDelete_pb.CryptoDeleteTransactionBody.deserializeBinaryFromReader);
      msg.setCryptodelete(value);
      break;
    case 13:
      var value = new CryptoDeleteLiveHash_pb.CryptoDeleteLiveHashTransactionBody;
      reader.readMessage(value,CryptoDeleteLiveHash_pb.CryptoDeleteLiveHashTransactionBody.deserializeBinaryFromReader);
      msg.setCryptodeletelivehash(value);
      break;
    case 14:
      var value = new CryptoTransfer_pb.CryptoTransferTransactionBody;
      reader.readMessage(value,CryptoTransfer_pb.CryptoTransferTransactionBody.deserializeBinaryFromReader);
      msg.setCryptotransfer(value);
      break;
    case 15:
      var value = new CryptoUpdate_pb.CryptoUpdateTransactionBody;
      reader.readMessage(value,CryptoUpdate_pb.CryptoUpdateTransactionBody.deserializeBinaryFromReader);
      msg.setCryptoupdateaccount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.TransactionBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.TransactionBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.TransactionBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TransactionBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      BasicTypes_pb.TransactionID.serializeBinaryToWriter
    );
  }
  f = message.getNodeaccountid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      BasicTypes_pb.AccountID.serializeBinaryToWriter
    );
  }
  f = message.getTransactionfee();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      3,
      f
    );
  }
  f = message.getTransactionvalidduration();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      Duration_pb.Duration.serializeBinaryToWriter
    );
  }
  f = message.getGeneraterecord();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getMemo();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCryptoaddlivehash();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      CryptoAddLiveHash_pb.CryptoAddLiveHashTransactionBody.serializeBinaryToWriter
    );
  }
  f = message.getCryptocreateaccount();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      CryptoCreate_pb.CryptoCreateTransactionBody.serializeBinaryToWriter
    );
  }
  f = message.getCryptodelete();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      CryptoDelete_pb.CryptoDeleteTransactionBody.serializeBinaryToWriter
    );
  }
  f = message.getCryptodeletelivehash();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      CryptoDeleteLiveHash_pb.CryptoDeleteLiveHashTransactionBody.serializeBinaryToWriter
    );
  }
  f = message.getCryptotransfer();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      CryptoTransfer_pb.CryptoTransferTransactionBody.serializeBinaryToWriter
    );
  }
  f = message.getCryptoupdateaccount();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      CryptoUpdate_pb.CryptoUpdateTransactionBody.serializeBinaryToWriter
    );
  }
};


/**
 * optional TransactionID transactionID = 1;
 * @return {?proto.proto.TransactionID}
 */
proto.proto.TransactionBody.prototype.getTransactionid = function() {
  return /** @type{?proto.proto.TransactionID} */ (
    jspb.Message.getWrapperField(this, BasicTypes_pb.TransactionID, 1));
};


/**
 * @param {?proto.proto.TransactionID|undefined} value
 * @return {!proto.proto.TransactionBody} returns this
*/
proto.proto.TransactionBody.prototype.setTransactionid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.TransactionBody} returns this
 */
proto.proto.TransactionBody.prototype.clearTransactionid = function() {
  return this.setTransactionid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.TransactionBody.prototype.hasTransactionid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AccountID nodeAccountID = 2;
 * @return {?proto.proto.AccountID}
 */
proto.proto.TransactionBody.prototype.getNodeaccountid = function() {
  return /** @type{?proto.proto.AccountID} */ (
    jspb.Message.getWrapperField(this, BasicTypes_pb.AccountID, 2));
};


/**
 * @param {?proto.proto.AccountID|undefined} value
 * @return {!proto.proto.TransactionBody} returns this
*/
proto.proto.TransactionBody.prototype.setNodeaccountid = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.TransactionBody} returns this
 */
proto.proto.TransactionBody.prototype.clearNodeaccountid = function() {
  return this.setNodeaccountid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.TransactionBody.prototype.hasNodeaccountid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 transactionFee = 3;
 * @return {string}
 */
proto.proto.TransactionBody.prototype.getTransactionfee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.proto.TransactionBody} returns this
 */
proto.proto.TransactionBody.prototype.setTransactionfee = function(value) {
  return jspb.Message.setProto3StringIntField(this, 3, value);
};


/**
 * optional Duration transactionValidDuration = 4;
 * @return {?proto.proto.Duration}
 */
proto.proto.TransactionBody.prototype.getTransactionvalidduration = function() {
  return /** @type{?proto.proto.Duration} */ (
    jspb.Message.getWrapperField(this, Duration_pb.Duration, 4));
};


/**
 * @param {?proto.proto.Duration|undefined} value
 * @return {!proto.proto.TransactionBody} returns this
*/
proto.proto.TransactionBody.prototype.setTransactionvalidduration = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.TransactionBody} returns this
 */
proto.proto.TransactionBody.prototype.clearTransactionvalidduration = function() {
  return this.setTransactionvalidduration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.TransactionBody.prototype.hasTransactionvalidduration = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool generateRecord = 5;
 * @return {boolean}
 */
proto.proto.TransactionBody.prototype.getGeneraterecord = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.TransactionBody} returns this
 */
proto.proto.TransactionBody.prototype.setGeneraterecord = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional string memo = 6;
 * @return {string}
 */
proto.proto.TransactionBody.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.TransactionBody} returns this
 */
proto.proto.TransactionBody.prototype.setMemo = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional CryptoAddLiveHashTransactionBody cryptoAddLiveHash = 10;
 * @return {?proto.proto.CryptoAddLiveHashTransactionBody}
 */
proto.proto.TransactionBody.prototype.getCryptoaddlivehash = function() {
  return /** @type{?proto.proto.CryptoAddLiveHashTransactionBody} */ (
    jspb.Message.getWrapperField(this, CryptoAddLiveHash_pb.CryptoAddLiveHashTransactionBody, 10));
};


/**
 * @param {?proto.proto.CryptoAddLiveHashTransactionBody|undefined} value
 * @return {!proto.proto.TransactionBody} returns this
*/
proto.proto.TransactionBody.prototype.setCryptoaddlivehash = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.proto.TransactionBody.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.TransactionBody} returns this
 */
proto.proto.TransactionBody.prototype.clearCryptoaddlivehash = function() {
  return this.setCryptoaddlivehash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.TransactionBody.prototype.hasCryptoaddlivehash = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional CryptoCreateTransactionBody cryptoCreateAccount = 11;
 * @return {?proto.proto.CryptoCreateTransactionBody}
 */
proto.proto.TransactionBody.prototype.getCryptocreateaccount = function() {
  return /** @type{?proto.proto.CryptoCreateTransactionBody} */ (
    jspb.Message.getWrapperField(this, CryptoCreate_pb.CryptoCreateTransactionBody, 11));
};


/**
 * @param {?proto.proto.CryptoCreateTransactionBody|undefined} value
 * @return {!proto.proto.TransactionBody} returns this
*/
proto.proto.TransactionBody.prototype.setCryptocreateaccount = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.proto.TransactionBody.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.TransactionBody} returns this
 */
proto.proto.TransactionBody.prototype.clearCryptocreateaccount = function() {
  return this.setCryptocreateaccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.TransactionBody.prototype.hasCryptocreateaccount = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional CryptoDeleteTransactionBody cryptoDelete = 12;
 * @return {?proto.proto.CryptoDeleteTransactionBody}
 */
proto.proto.TransactionBody.prototype.getCryptodelete = function() {
  return /** @type{?proto.proto.CryptoDeleteTransactionBody} */ (
    jspb.Message.getWrapperField(this, CryptoDelete_pb.CryptoDeleteTransactionBody, 12));
};


/**
 * @param {?proto.proto.CryptoDeleteTransactionBody|undefined} value
 * @return {!proto.proto.TransactionBody} returns this
*/
proto.proto.TransactionBody.prototype.setCryptodelete = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.proto.TransactionBody.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.TransactionBody} returns this
 */
proto.proto.TransactionBody.prototype.clearCryptodelete = function() {
  return this.setCryptodelete(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.TransactionBody.prototype.hasCryptodelete = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional CryptoDeleteLiveHashTransactionBody cryptoDeleteLiveHash = 13;
 * @return {?proto.proto.CryptoDeleteLiveHashTransactionBody}
 */
proto.proto.TransactionBody.prototype.getCryptodeletelivehash = function() {
  return /** @type{?proto.proto.CryptoDeleteLiveHashTransactionBody} */ (
    jspb.Message.getWrapperField(this, CryptoDeleteLiveHash_pb.CryptoDeleteLiveHashTransactionBody, 13));
};


/**
 * @param {?proto.proto.CryptoDeleteLiveHashTransactionBody|undefined} value
 * @return {!proto.proto.TransactionBody} returns this
*/
proto.proto.TransactionBody.prototype.setCryptodeletelivehash = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.proto.TransactionBody.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.TransactionBody} returns this
 */
proto.proto.TransactionBody.prototype.clearCryptodeletelivehash = function() {
  return this.setCryptodeletelivehash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.TransactionBody.prototype.hasCryptodeletelivehash = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional CryptoTransferTransactionBody cryptoTransfer = 14;
 * @return {?proto.proto.CryptoTransferTransactionBody}
 */
proto.proto.TransactionBody.prototype.getCryptotransfer = function() {
  return /** @type{?proto.proto.CryptoTransferTransactionBody} */ (
    jspb.Message.getWrapperField(this, CryptoTransfer_pb.CryptoTransferTransactionBody, 14));
};


/**
 * @param {?proto.proto.CryptoTransferTransactionBody|undefined} value
 * @return {!proto.proto.TransactionBody} returns this
*/
proto.proto.TransactionBody.prototype.setCryptotransfer = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.proto.TransactionBody.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.TransactionBody} returns this
 */
proto.proto.TransactionBody.prototype.clearCryptotransfer = function() {
  return this.setCryptotransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.TransactionBody.prototype.hasCryptotransfer = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional CryptoUpdateTransactionBody cryptoUpdateAccount = 15;
 * @return {?proto.proto.CryptoUpdateTransactionBody}
 */
proto.proto.TransactionBody.prototype.getCryptoupdateaccount = function() {
  return /** @type{?proto.proto.CryptoUpdateTransactionBody} */ (
    jspb.Message.getWrapperField(this, CryptoUpdate_pb.CryptoUpdateTransactionBody, 15));
};


/**
 * @param {?proto.proto.CryptoUpdateTransactionBody|undefined} value
 * @return {!proto.proto.TransactionBody} returns this
*/
proto.proto.TransactionBody.prototype.setCryptoupdateaccount = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.proto.TransactionBody.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.TransactionBody} returns this
 */
proto.proto.TransactionBody.prototype.clearCryptoupdateaccount = function() {
  return this.setCryptoupdateaccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.TransactionBody.prototype.hasCryptoupdateaccount = function() {
  return jspb.Message.getField(this, 15) != null;
};


goog.object.extend(exports, proto.proto);
